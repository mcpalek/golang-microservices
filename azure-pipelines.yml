trigger:
  branches:
    include:
      - main

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    # Build and push db_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'db_service'
        dockerfile: 'db_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

    # Build and push web_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'web_service'
        dockerfile: 'web_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

    # Build and push frontend_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'frontend_service'
        dockerfile: 'frontend_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

  - job: Deploy
    steps:
    # ✅ Download kubeconfig.yaml file
    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'kubeconfig.yaml'

    # ✅ Debugging step: Ensure kubeconfig is downloaded and accessible
    - script: |
        ls -lah $(Agent.TempDirectory)
        cat $(Agent.TempDirectory)/kubeconfig.yaml
      displayName: 'Debug: Check kubeconfig file'

    # ✅ Verify the pipeline user
    - script: whoami
      displayName: 'Check Pipeline User'

    # ✅ Set Kubeconfig and test cluster access
    - script: |
        chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
        export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
        kubectl config view
        kubectl get nodes
      displayName: 'Set Kubeconfig and Verify Cluster Access'

    # ✅ Check Kubernetes API access (ensures network connectivity)
    - script: |
        curl -v -k https://192.168.100.202:6443
      displayName: 'Check Kubernetes API Access'

    # ✅ Deploy Kubernetes manifests
    - script: |
        export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
        kubectl apply -f k8s/
      displayName: 'Apply Kubernetes Manifests'

    # ✅ Use Kubernetes Task to deploy with the correct kubeconfig
    - task: Kubernetes@1
      inputs:
        connectionType: 'KubeConfig'
        kubeconfig: '$(Agent.TempDirectory)/kubeconfig.yaml'
        command: 'apply'
        arguments: '-f k8s/'
      displayName: 'Deploy using Kubernetes Task'
# - stage: Deploy
#   jobs:
#   - job: Deploy
#     steps:
#     - task: DownloadSecureFile@1
#       inputs:
#         secureFile: 'kubeconfig.yaml'

#     - script: |
#         chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl config view
#         kubectl get nodes
#       displayName: 'Set Kubeconfig and Verify Cluster Access'

#     - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/
#       displayName: 'Apply Kubernetes Manifests'

