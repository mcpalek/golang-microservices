trigger:
  branches:
    include:
      - main2

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu-desktop
    steps:
    # Build and push db_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'db_service'
        dockerfile: 'db_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: |
          448
          latest

    # Build and push web_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'web_service'
        dockerfile: 'web_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: |
          458
          latest

    # Build and push frontend_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'frontend_service'
        dockerfile: 'frontend_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: |
          478
          latest

- stage: Deploy
  jobs:
  - job: Deploy
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu-desktop
    steps:
      # Apply Kubernetes configurations (example: configmaps, secrets, etc.)
      - script: |
          kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/configmap.yaml
        displayName: 'Apply Kubernetes Configs'
      - script: |
          job_name="db-service"
          expected_image="golang.azurecr.io/db_service:448"

          # Check if the Job exists
          if kubectl get job $job_name &> /dev/null; then
            # Extract the previous image from the last Job (if available)
            current_image=$(kubectl get job $job_name -o=jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null)

            echo "Current Image: $current_image"
            echo "Expected Image: $expected_image"

            # Check if the Job is already using the correct image
            if [[ "$current_image" == "$expected_image" ]]; then
              echo "‚úÖ db-service job is already using the correct image. No need to rerun."
              exit 0  # Exit without running the Job again
            else
              echo "‚ö†Ô∏è New image detected! Deleting and recreating db-service job..."
              kubectl delete job $job_name
            fi
          else
            echo "üöÄ Deploying db-service job for the first time..."
          fi

          # Apply the new Job definition
          kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/db_service-deployment.yaml
        displayName: 'Deploy or Update DB Service Job'

    # Check and deploy/update db_service
      # - script: |
      #     if kubectl get deployment db-service &> /dev/null; then
      #       kubectl set image deployment/db-service db-service=MyAzureContainerRegistry/db_service:448
      #       kubectl rollout status deployment/db-service
      #     else
      #       kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/db_service-deployment.yaml
      #     fi
      #   displayName: 'Deploy or Update DB Service'
      - script: |
          if kubectl get deployment web-service &> /dev/null; then
            current_image=$(kubectl get deployment web-service -o=jsonpath='{.spec.template.spec.containers[0].image}')
            expected_image="golang.azurecr.io/web_service:458"

            echo "Current Image: $current_image"
            echo "Expected Image: $expected_image"

            if [[ "$current_image" == "$expected_image" ]]; then
              echo "‚úÖ web-service is already using the correct image: $expected_image"
            else
              echo "‚ö†Ô∏è Updating web-service to use image: $expected_image"
              kubectl set image deployment/web-service web-service=$expected_image --record
              kubectl rollout status deployment/web-service
            fi
          else
            echo "üöÄ Deploying web-service for the first time..."
            kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/web_service-deployment.yaml
          fi
        displayName: 'Deploy or Update Web Service'


      - script: |
          if kubectl get deployment frontend-service &> /dev/null; then
            current_image=$(kubectl get deployment frontend-service -o=jsonpath='{.spec.template.spec.containers[0].image}')
            expected_image="golang.azurecr.io/frontend_service:478"

            echo "Current Image: $current_image"
            echo "Expected Image: $expected_image"

            if [[ "$current_image" == "$expected_image" ]]; then
              echo "‚úÖ frontend-service is already using the correct image: $expected_image"
            else
              echo "‚ö†Ô∏è Updating frontend-service to use image: $expected_image"
              kubectl set image deployment/frontend-service frontend-service=$expected_image --record
              kubectl rollout status deployment/frontend-service
            fi
          else
            echo "üöÄ Deploying frontend-service for the first time..."
            kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/frontend_service-deployment.yaml
          fi
        displayName: 'Deploy or Update FrontEnd Service'



