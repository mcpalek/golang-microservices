trigger:
  branches:
    include:
      - main2

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu-desktop
    steps:
    # Build and push db_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'db_service'
        dockerfile: 'db_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: |
          448
          latest

    # Build and push web_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'web_service'
        dockerfile: 'web_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: |
          458
          latest

    # Build and push frontend_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'frontend_service'
        dockerfile: 'frontend_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: |
          474
          latest

- stage: Deploy
  jobs:
  - job: Deploy
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu-desktop
    steps:
      # Apply Kubernetes configurations (example: configmaps, secrets, etc.)
      - script: |
          kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/configmap.yaml
        displayName: 'Apply Kubernetes Configs'
    # Check and deploy/update db_service
      - script: |
          if kubectl get deployment db-service &> /dev/null; then
            kubectl set image deployment/db-service db-service=MyAzureContainerRegistry/db_service:448
            kubectl rollout status deployment/db-service
          else
            kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/db_service-deployment.yaml
          fi
        displayName: 'Deploy or Update DB Service'

      - script: |
          if kubectl get deployment web-service &> /dev/null; then
            current_image=$(kubectl get deployment web-service -o=jsonpath='{.spec.template.spec.containers[0].image}')
            expected_image="MyAzureContainerRegistry/web_service:458"
            if [[ "$current_image" == "$expected_image" ]]; then
              echo "web-service is already using the correct image: $expected_image"
            else
              kubectl set image deployment/web-service web-service=$expected_image --record --dry-run=client
              kubectl rollout status deployment/web-service
            fi
          else
            kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/web_service-deployment.yaml
          fi
        displayName: 'Deploy or Update Web Service'




      # Deploy frontend_service
      - script: |
          if kubectl get deployment frontend-service &> /dev/null; then
            current_image=$(kubectl get deployment frontend-service -o=jsonpath='{.spec.template.spec.containers[0].image}')
            if [[ "$current_image" != "MyAzureContainerRegistry/frontend_service:474" ]]; then
              kubectl set image deployment/frontend-service frontend-service=golang.azurecr.io/frontend_service:474
              kubectl rollout status deployment/frontend-service
            else
              echo "frontend-service is already using the correct image."
            fi
          else
            kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/frontend_service-deployment.yaml
          fi
        displayName: 'Deploy or Update Frontend Service'
      # - script: |
      #     if kubectl get deployment web-service &> /dev/null; then
      #       kubectl set image deployment/web-service web-service=MyAzureContainerRegistry/web_service:458
      #       kubectl rollout status deployment/web-service
      #     else
      #       kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/web_service-deployment.yaml
      #     fi
      #   displayName: 'Deploy or Update Web Service'

      # # Check and deploy/update frontend_service
      # - script: |
      #     if kubectl get deployment frontend-service &> /dev/null; then
      #       kubectl set image deployment/frontend-service frontend-service=MyAzureContainerRegistry/frontend_service:461
      #       kubectl rollout status deployment/frontend-service
      #     else
      #       kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/frontend_service-deployment.yaml
      #     fi
      #   displayName: 'Deploy or Update Frontend Service'
