trigger:
  branches:
    include:
      - main

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    # Build and push db_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'db_service'
        dockerfile: 'db_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

    # Build and push web_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'web_service'
        dockerfile: 'web_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

    # Build and push frontend_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'frontend_service'
        dockerfile: 'frontend_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest
- stage: Deploy
  jobs:
  - job: Deploy
    steps:
    # ✅ Download kubeconfig.yaml file
    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'kubeconfig.yaml'

    # ✅ Debugging step: Ensure kubeconfig is downloaded and accessible
    - script: |
        ls -lah $(Agent.TempDirectory)
        cat $(Agent.TempDirectory)/kubeconfig.yaml
      displayName: 'Debug: Check kubeconfig file'

    # ✅ Verify the pipeline user
    - script: whoami
      displayName: 'Check Pipeline User'

    # ✅ Ensure network connectivity
    - script: |
        ping -c 4 192.168.100.202
      displayName: 'Ping Kubernetes Master Node'

    # ✅ Check Kubernetes API access (ensures network connectivity)
    - script: |
        curl -v -k https://192.168.100.202:6443
      displayName: 'Check Kubernetes API Access'

    # ✅ Set Kubeconfig and test cluster access
    - script: |
        chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
        export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
        kubectl config view
        kubectl get nodes
      displayName: 'Set Kubeconfig and Verify Cluster Access'

    # ✅ Deploy Kubernetes manifests using direct kubectl commands
    - script: |
        export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
        kubectl apply -f k8s/ || echo "Apply failed!"
      displayName: 'Apply Kubernetes Manifests'
# - stage: Deploy
#   jobs:
#   - job: Deploy
#     steps:
#     # ✅ Display Agent Environment & Network Config
#     - script: |
#         echo "=== Checking System Info ==="
#         uname -a
#         whoami
#         echo "=== Checking Installed Tools ==="
#         kubectl version --client || echo "kubectl NOT found!"
#         curl --version || echo "curl NOT found!"
#         ping -V || echo "ping NOT found!"
#         echo "=== Checking Network Config ==="
#         ip a || ifconfig || echo "No network info found!"
#         route -n || echo "No routing table found!"
#       displayName: 'Agent Environment & Network Check'

#     # ✅ Check if Kubernetes API Server is Reachable
#     - script: |
#         echo "=== Checking Network to Kubernetes API ==="
#         ping -c 4 192.168.100.202 || echo "Ping failed!"
#         nc -zv 192.168.100.202 6443 || echo "Port 6443 is CLOSED!"
#         (echo quit | telnet 192.168.100.202 6443) || echo "Telnet failed!"
#       displayName: 'Network Pre-Check: Ping & Ports'

#     # ✅ Check DNS Resolution for API Server
#     - script: |
#         echo "=== Checking DNS Resolution ==="
#         nslookup 192.168.100.202 || echo "nslookup failed!"
#         dig +short 192.168.100.202 || echo "dig failed!"
#       displayName: 'DNS Resolution Check'

#     # ✅ Check SSH Access to Kubernetes Master (If Applicable)
#     - script: |
#         echo "=== Checking SSH to Kubernetes Master ==="
#         ssh -o BatchMode=yes -o ConnectTimeout=5 user@192.168.100.202 "echo 'SSH OK'" || echo "SSH failed!"
#       displayName: 'SSH Connectivity Check (Optional)'

#     # ✅ Download kubeconfig.yaml file
#     - task: DownloadSecureFile@1
#       inputs:
#         secureFile: 'kubeconfig.yaml'

#     # ✅ Debugging step: Ensure kubeconfig is downloaded and accessible
#     - script: |
#         echo "Checking if kubeconfig file exists..."
#         ls -lah $(Agent.TempDirectory)
#         cat $(Agent.TempDirectory)/kubeconfig.yaml || echo "kubeconfig NOT found!"
#       displayName: 'Debug: Check kubeconfig file'

#     # ✅ Verify the pipeline user
#     - script: whoami
#       displayName: 'Check Pipeline User'

#     # ✅ Set Kubeconfig and test cluster access
#     - script: |
#         echo "Setting KUBECONFIG..."
#         chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         echo "Verifying Kubeconfig..."
#         kubectl config view || echo "Kubeconfig view failed!"
#         kubectl cluster-info || echo "Cluster info failed!"
#         kubectl get nodes || echo "Failed to get nodes!"
#       displayName: 'Set Kubeconfig and Verify Cluster Access'

#     # ✅ If API Fails, Fetch Logs
#     - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         echo "Fetching Kubernetes API Logs..."
#         ssh -o StrictHostKeyChecking=no user@192.168.100.202 'sudo journalctl -u kube-apiserver --no-pager | tail -n 50' || echo "Failed to fetch logs!"
#       displayName: 'Debug Kubernetes API (If Unreachable)'

#     # ✅ Deploy Kubernetes manifests
#     - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/ || echo "Apply failed!"
#       displayName: 'Apply Kubernetes Manifests'

#     # ✅ Use Kubernetes Task to deploy with the correct kubeconfig
#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'KubeConfig'
#         kubeconfig: '$(Agent.TempDirectory)/kubeconfig.yaml'
#         command: 'apply'
#         arguments: '-f k8s/'
#       displayName: 'Deploy using Kubernetes Task'