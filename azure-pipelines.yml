trigger:
  branches:
    include:
      - main

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu-desktop
    steps:
    # Build and push db_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'db_service'
        dockerfile: 'db_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

    # Build and push web_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'web_service'
        dockerfile: 'web_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest

    # Build and push frontend_service
    - task: Docker@2
      inputs:
        command: buildAndPush
        containerRegistry: 'MyAzureContainerRegistry'
        repository: 'frontend_service'
        dockerfile: 'frontend_service/Dockerfile'
        buildContext: $(Build.SourcesDirectory)
        tags: latest
- stage: Deploy
  jobs:
  - job: Deploy
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu-desktop
    steps:
    
     # ✅ Display the Default Working Directory
     - script: |
         echo "Default Working Directory: $(System.DefaultWorkingDirectory)"
       displayName: 'Display Default Working Directory'

     # ✅ Display files in the k8s directory before deployment
     - script: |
         echo "Listing files in k8s directory:"
         ls -lah $(System.DefaultWorkingDirectory)/k8s || echo "No k8s directory found!"
       displayName: 'List files in k8s directory'

     # ✅ Display Agent Environment & Network Config
     - script: |
         echo "=== Checking System Info ==="
         uname -a
         whoami
         echo "=== Checking Installed Tools ==="
         kubectl version --client || echo "kubectl NOT found!"
         curl --version || echo "curl NOT found!"
         ping -V || echo "ping NOT found!"
         echo "=== Checking Network Config ==="
         ip a || ifconfig || echo "No network info found!"
         route -n || echo "No routing table found!"
       displayName: 'Agent Environment & Network Check'

     # ✅ Check if Kubernetes API Server is Reachable
     - script: |
         echo "=== Checking Network to Kubernetes API ==="
         ping -c 4 192.168.100.202 || echo "Ping failed!"
         nc -zv 192.168.100.202 6443 || echo "Port 6443 is CLOSED!"
         (echo quit | telnet 192.168.100.202 6443) || echo "Telnet failed!"
       displayName: 'Network Pre-Check: Ping & Ports'

     # ✅ Check DNS Resolution for API Server
     - script: |
         echo "=== Checking DNS Resolution ==="
         nslookup 192.168.100.202 || echo "nslookup failed!"
         dig +short 192.168.100.202 || echo "dig failed!"
       displayName: 'DNS Resolution Check'

     # ✅ Check SSH Access to Kubernetes Master (If Applicable)
     - script: |
         echo "=== Checking SSH to Kubernetes Master ==="
         ssh -o BatchMode=yes -o ConnectTimeout=5 user@192.168.100.202 "echo 'SSH OK'" || echo "SSH failed!"
       displayName: 'SSH Connectivity Check (Optional)'

     # ✅ Download kubeconfig.yaml file
     - task: DownloadSecureFile@1
       inputs:
         secureFile: 'kubeconfig.yaml'

     # ✅ Debugging step: Ensure kubeconfig is downloaded and accessible
     - script: |
         echo "Checking if kubeconfig file exists..."
         ls -lah $(Agent.TempDirectory)
         cat $(Agent.TempDirectory)/kubeconfig.yaml || echo "kubeconfig NOT found!"
       displayName: 'Debug: Check kubeconfig file'

     # ✅ Verify the pipeline user
     - script: whoami
       displayName: 'Check Pipeline User'

     # ✅ Set Kubeconfig and test cluster access
     - script: |
         echo "Setting KUBECONFIG..."
         chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         echo "Verifying Kubeconfig..."
         kubectl config view || echo "Kubeconfig view failed!"
         kubectl cluster-info || echo "Cluster info failed!"
         kubectl get nodes || echo "Failed to get nodes!"
       displayName: 'Set Kubeconfig and Verify Cluster Access'

     # ✅ If API Fails, Fetch Logs
     - script: |
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         echo "Fetching Kubernetes API Logs..."
         ssh -o StrictHostKeyChecking=no user@192.168.100.202 'sudo journalctl -u kube-apiserver --no-pager | tail -n 50' || echo "Failed to fetch logs!"
       displayName: 'Debug Kubernetes API (If Unreachable)'

     # ✅ Apply Kubernetes base configurations (ConfigMaps, Secrets, Services)
     - script: |
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/configmap.yaml
       displayName: 'Apply Kubernetes Configs'

     # ✅ Deploy DB Service
     - script: |
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/db_service-deployment.yaml
       displayName: 'Deploy DB Service'

     # ✅ Deploy Web Service
     - script: |
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/web_service-deployment.yaml
       displayName: 'Deploy Web Service'

     # ✅ Deploy Frontend Service
     - script: |
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         kubectl apply -f $(System.DefaultWorkingDirectory)/k8s/frontend_service-deployment.yaml
       displayName: 'Deploy Frontend Service'

     # ✅ Wait for deployments to be ready
     - script: |
         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
         kubectl rollout status deployment/db-service
         kubectl rollout status deployment/web-service
         kubectl rollout status deployment/frontend-service
       displayName: 'Wait for Deployments to be Ready'

    #  # ✅ Publish Artifact: Save kubeconfig.yaml and other debug files
    #  - task: PublishBuildArtifacts@1
    #    inputs:
    #      artifactName: 'k8s-deployment-debug'
    #      publishLocation: 'Container'
    #      targetPath: '$(Agent.TempDirectory)'
    #    displayName: 'Publish Debug Artifacts'


# - stage: Deploy
#   jobs:
#   - job: Deploy
#     steps:
#      # ✅ Display Agent Environment & Network Config
#      - script: |
#          echo "=== Checking System Info ==="
#          uname -a
#          whoami
#          echo "=== Checking Installed Tools ==="
#          kubectl version --client || echo "kubectl NOT found!"
#          curl --version || echo "curl NOT found!"
#          ping -V || echo "ping NOT found!"
#          echo "=== Checking Network Config ==="
#          ip a || ifconfig || echo "No network info found!"
#          route -n || echo "No routing table found!"
#        displayName: 'Agent Environment & Network Check'
#      # ✅ Check if Kubernetes API Server is Reachable
#      - script: |
#          echo "=== Checking Network to Kubernetes API ==="
#          ping -c 4 192.168.100.202 || echo "Ping failed!"
#          nc -zv 192.168.100.202 6443 || echo "Port 6443 is CLOSED!"
#          (echo quit | telnet 192.168.100.202 6443) || echo "Telnet failed!"
#        displayName: 'Network Pre-Check: Ping & Ports'

#      # ✅ Check DNS Resolution for API Server
#      - script: |
#          echo "=== Checking DNS Resolution ==="
#          nslookup 192.168.100.202 || echo "nslookup failed!"
#          dig +short 192.168.100.202 || echo "dig failed!"
#        displayName: 'DNS Resolution Check'

#      # ✅ Check SSH Access to Kubernetes Master (If Applicable)
#      - script: |
#          echo "=== Checking SSH to Kubernetes Master ==="
#          ssh -o BatchMode=yes -o ConnectTimeout=5 user@192.168.100.202 "echo 'SSH OK'" || echo "SSH failed!"
#        displayName: 'SSH Connectivity Check (Optional)'

#      # ✅ Download kubeconfig.yaml file
#      - task: DownloadSecureFile@1
#        inputs:
#          secureFile: 'kubeconfig.yaml'

#      # ✅ Debugging step: Ensure kubeconfig is downloaded and accessible
#      - script: |
#          echo "Checking if kubeconfig file exists..."
#          ls -lah $(Agent.TempDirectory)
#          cat $(Agent.TempDirectory)/kubeconfig.yaml || echo "kubeconfig NOT found!"
#        displayName: 'Debug: Check kubeconfig file'

#      # ✅ Verify the pipeline user
#      - script: whoami
#        displayName: 'Check Pipeline User'

#      # ✅ Set Kubeconfig and test cluster access
#      - script: |
#          echo "Setting KUBECONFIG..."
#          chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
#          export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#          echo "Verifying Kubeconfig..."
#          kubectl config view || echo "Kubeconfig view failed!"
#          kubectl cluster-info || echo "Cluster info failed!"
#          kubectl get nodes || echo "Failed to get nodes!"
#        displayName: 'Set Kubeconfig and Verify Cluster Access'

#      # ✅ If API Fails, Fetch Logs
#      - script: |
#          export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#          echo "Fetching Kubernetes API Logs..."
#          ssh -o StrictHostKeyChecking=no user@192.168.100.202 'sudo journalctl -u kube-apiserver --no-pager | tail -n 50' || echo "Failed to fetch logs!"
#        displayName: 'Debug Kubernetes API (If Unreachable)'

#       # ✅ Apply Kubernetes base configurations (ConfigMaps, Secrets, Services)
#      - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/configmap.yaml
#        displayName: 'Apply Kubernetes Configs'


#     # ✅ Deploy DB Service
#      - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/db_service-deployment.yaml
#        displayName: 'Deploy DB Service'

#     # ✅ Deploy Web Service
#      - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/web_service-deployment.yaml
#        displayName: 'Deploy Web Service'

#     # ✅ Deploy Frontend Service
#      - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/frontend_service-deployment.yaml
#        displayName: 'Deploy Frontend Service'

#     # ✅ Wait for deployments to be ready
#      - script: |
#          export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#          kubectl rollout status deployment/db-service
#          kubectl rollout status deployment/web-service
#          kubectl rollout status deployment/frontend-service
#        displayName: 'Wait for Deployments to be Ready'
    
# - stage: Deploy
#   jobs:
#   - job: Deploy
#     steps:
#     # ✅ Display Agent Environment & Network Config
#     - script: |
#         echo "=== Checking System Info ==="
#         uname -a
#         whoami
#         echo "=== Checking Installed Tools ==="
#         kubectl version --client || echo "kubectl NOT found!"
#         curl --version || echo "curl NOT found!"
#         ping -V || echo "ping NOT found!"
#         echo "=== Checking Network Config ==="
#         ip a || ifconfig || echo "No network info found!"
#         route -n || echo "No routing table found!"
#       displayName: 'Agent Environment & Network Check'

#     # ✅ Check if Kubernetes API Server is Reachable
#     - script: |
#         echo "=== Checking Network to Kubernetes API ==="
#         ping -c 4 192.168.100.202 || echo "Ping failed!"
#         nc -zv 192.168.100.202 6443 || echo "Port 6443 is CLOSED!"
#         (echo quit | telnet 192.168.100.202 6443) || echo "Telnet failed!"
#       displayName: 'Network Pre-Check: Ping & Ports'

#     # ✅ Check DNS Resolution for API Server
#     - script: |
#         echo "=== Checking DNS Resolution ==="
#         nslookup 192.168.100.202 || echo "nslookup failed!"
#         dig +short 192.168.100.202 || echo "dig failed!"
#       displayName: 'DNS Resolution Check'

#     # ✅ Check SSH Access to Kubernetes Master (If Applicable)
#     - script: |
#         echo "=== Checking SSH to Kubernetes Master ==="
#         ssh -o BatchMode=yes -o ConnectTimeout=5 user@192.168.100.202 "echo 'SSH OK'" || echo "SSH failed!"
#       displayName: 'SSH Connectivity Check (Optional)'

#     # ✅ Download kubeconfig.yaml file
#     - task: DownloadSecureFile@1
#       inputs:
#         secureFile: 'kubeconfig.yaml'

#     # ✅ Debugging step: Ensure kubeconfig is downloaded and accessible
#     - script: |
#         echo "Checking if kubeconfig file exists..."
#         ls -lah $(Agent.TempDirectory)
#         cat $(Agent.TempDirectory)/kubeconfig.yaml || echo "kubeconfig NOT found!"
#       displayName: 'Debug: Check kubeconfig file'

#     # ✅ Verify the pipeline user
#     - script: whoami
#       displayName: 'Check Pipeline User'

#     # ✅ Set Kubeconfig and test cluster access
#     - script: |
#         echo "Setting KUBECONFIG..."
#         chmod 600 $(Agent.TempDirectory)/kubeconfig.yaml
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         echo "Verifying Kubeconfig..."
#         kubectl config view || echo "Kubeconfig view failed!"
#         kubectl cluster-info || echo "Cluster info failed!"
#         kubectl get nodes || echo "Failed to get nodes!"
#       displayName: 'Set Kubeconfig and Verify Cluster Access'

#     # ✅ If API Fails, Fetch Logs
#     - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         echo "Fetching Kubernetes API Logs..."
#         ssh -o StrictHostKeyChecking=no user@192.168.100.202 'sudo journalctl -u kube-apiserver --no-pager | tail -n 50' || echo "Failed to fetch logs!"
#       displayName: 'Debug Kubernetes API (If Unreachable)'

#     # ✅ Deploy Kubernetes 
#     - script: |
#         export KUBECONFIG=$(Agent.TempDirectory)/kubeconfig.yaml
#         kubectl apply -f k8s/ || echo "Apply failed!"
#       displayName: 'Apply Kubernetes Manifests'

    